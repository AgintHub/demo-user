dag_type: stub
description: Generated workflow from UI.
name: Rocket Ship Workflow
nodes:
  Choose Power Source:
    agent: false
    code_node_type: stub
    description: Identify the optimal power source for the rocket ship.
    implementation: code/Choose Power Source.py
    name: Choose Power Source
    nodes_depended_on:
    - Define Rocket Ship Requirements
    nodes_dependent_on: []
    output_structure:
    - description: The chosen power source for the rocket ship.
      key: selected_power_source
      type: str
    - description: A brief explanation of why this power source was chosen.
      key: justification
      type: str
    - description: A list of details regarding the redundant power systems implemented.
      key: redundancy_details
      type: List[str]
    prd: code/code_PRDs.md
    prompt: Select a suitable power source for the rocket ship, taking into account
      the propulsion system's energy requirements and the need for redundant power
      systems.
    shims: []
  Conduct System Checks:
    agent: false
    code_node_type: stub
    description: Verify the rocket ship's systems are operational and safe for launch.
    implementation: code/Conduct System Checks.py
    name: Conduct System Checks
    nodes_depended_on:
    - Coordinate Final Assembly
    nodes_dependent_on: []
    output_structure:
    - description: Overall status of the rocket ship's systems (e.g. 'Pass', 'Fail',
        'Warning')
      key: system_status
      type: str
    - description: List of components that have been checked (e.g. 'Propulsion System',
        'Guidance System', 'Power System')
      key: component_list
      type: List[str]
    - description: List of warning messages (e.g. 'Component temperature out of range',
        'System pressure exceeds limits')
      key: warning_list
      type: List[str]
    - description: List of failed components (e.g. 'Propulsion System failed', 'Power
        System not functioning')
      key: fail_list
      type: List[str]
    prd: code/code_PRDs.md
    prompt: Perform a thorough system check to verify that all components are functioning
      within specified limits and that the rocket ship is ready for launch.
    shims: []
  Coordinate Final Assembly:
    agent: false
    code_node_type: stub
    description: Coordinate the integration of the rocket ship's various components.
    implementation: code/Coordinate Final Assembly.py
    name: Coordinate Final Assembly
    nodes_depended_on:
    - Integrate Propulsion and Guidance Systems
    - Implement Safety Features
    nodes_dependent_on: []
    output_structure:
    - description: Status of the final assembly (e.g., complete, incomplete, etc.).
      key: assembly_status
      type: str
    - description: Number of components integrated into the rocket ship.
      key: component_count
      type: int
    - description: Results of the system checks performed on the integrated components.
      key: system_check_results
      type: List[str]
    - description: Whether the rocket ship is ready for launch.
      key: launch_ready
      type: bool
    prd: code/code_PRDs.md
    prompt: Oversee the final assembly of the rocket ship, ensuring all components
      are integrated correctly and operating within specified parameters.
    shims: []
  Define Rocket Ship Requirements:
    agent: false
    code_node_type: stub
    description: Identify the fundamental components required for a rocket ship to
      operate.
    implementation: code/Define Rocket Ship Requirements.py
    name: Define Rocket Ship Requirements
    nodes_depended_on: []
    nodes_dependent_on: []
    output_structure:
    - description: Type of propulsion system (e.g., chemical, electric)
      key: propulsion_type
      type: str
    - description: Method of guidance (e.g., inertial, celestial)
      key: guidance_method
      type: str
    - description: Primary source of power (e.g., solar, nuclear)
      key: power_source
      type: str
    - description: Additional essential components
      key: additional_components
      type: List[str]
    prd: code/code_PRDs.md
    prompt: List the essential requirements of a functioning rocket ship, focusing
      on propulsion, guidance, and power systems.
    shims: []
  Design Propulsion System:
    agent: false
    code_node_type: stub
    description: Develop a detailed plan for the rocket ship's propulsion system.
    implementation: code/Design Propulsion System.py
    name: Design Propulsion System
    nodes_depended_on:
    - Define Rocket Ship Requirements
    nodes_dependent_on: []
    output_structure:
    - description: Detailed description of the propulsion system components.
      key: propulsion_description
      type: List[str]
    - description: Propulsion system specifications including combustion chamber,
        nozzle, fuel/oxidizer supply, and ignition.
      key: propulsion_specifications
      type: List[str]
    - description: System diagram of the propulsion system.
      key: system_diagram
      type: str
    prd: code/code_PRDs.md
    prompt: Based on the identified requirements, design a propulsion system that
      meets the necessary specifications. Focus on combustion chamber, nozzle, fuel/oxidizer
      supply, and ignition.
    shims: []
  Develop Guidance System:
    agent: false
    code_node_type: stub
    description: Create a plan for the rocket ship's guidance system.
    implementation: code/Develop Guidance System.py
    name: Develop Guidance System
    nodes_depended_on:
    - Define Rocket Ship Requirements
    nodes_dependent_on: []
    output_structure:
    - description: List of control surfaces designed for the rocket ship
      key: control_surfaces
      type: List[str]
    - description: List of navigation sensors used in the rocket ship's guidance system
      key: navigation_sensors
      type: List[str]
    - description: List of autopilot software components in the rocket ship's guidance
        system
      key: autopilot_software
      type: List[str]
    - description: Accuracy of the rocket ship's trajectory control system
      key: trajectory_control
      type: float
    prd: code/code_PRDs.md
    prompt: Design a guidance system that ensures accurate navigation and trajectory
      control. Include control surfaces, navigation sensors, and autopilot software.
    shims: []
  Implement Safety Features:
    agent: false
    code_node_type: stub
    description: Implement necessary safety measures to protect the rocket ship and
      its crew.
    implementation: code/Implement Safety Features.py
    name: Implement Safety Features
    nodes_depended_on:
    - Choose Power Source
    nodes_dependent_on: []
    output_structure:
    - description: List of unique identifiers for each safety feature implemented
      key: safety_feature_ids
      type: List[str]
    - description: Corresponding statuses of each safety feature, such as 'implemented',
        'pending', or 'failed'
      key: safety_feature_statuses
      type: List[str]
    - description: Summary of safety compliance status, e.g., 'Compliant', 'Non-compliant',
        or 'Pending review'
      key: overall_safety_compliance
      type: str
    prd: code/code_PRDs.md
    prompt: Develop and integrate essential safety features, including emergency shutdown
      protocols, fire suppression systems, and pressure containment.
    shims: []
  Integrate Propulsion and Guidance Systems:
    agent: false
    code_node_type: stub
    description: Combine the propulsion and guidance systems to ensure seamless operation.
    implementation: code/Integrate Propulsion and Guidance Systems.py
    name: Integrate Propulsion and Guidance Systems
    nodes_depended_on:
    - Design Propulsion System
    - Develop Guidance System
    nodes_dependent_on: []
    output_structure:
    - description: Status of the integration process (e.g., 'successful', 'failed')
      key: integration_status
      type: str
    - description: Protocol used for synchronizing propulsion and guidance systems
      key: synchronization_protocol
      type: str
    - description: Details about the control interface between propulsion and guidance
        systems
      key: control_interface_details
      type: str
    - description: List of redundancy features implemented in the integrated system
      key: redundancy_features
      type: List[str]
    - description: Whether the integrated system has been validated successfully
      key: validation_result
      type: bool
    prd: code/code_PRDs.md
    prompt: Integrate the designed propulsion and guidance systems, focusing on synchronization,
      control interfaces, and system redundancies.
    shims: []
