dag_type: plain_text
description: A workflow for creating a quantitative trading algorithm, from defining
  objectives to deploying the model.
name: quantitative_trading_algorithm
nodes:
  collect_historical_data:
    agent: false
    description: Gather historical price and trading data for the selected assets.
    name: collect_historical_data
    nodes_depended_on:
    - select_asset_universe
    nodes_dependent_on: []
    prompt: Collect historical price data for the selected assets over a specified
      time period (e.g., 1 year, 5 years). Ensure data is clean and properly formatted.
  define_trading_objectives:
    agent: false
    description: Specify the primary objectives for the trading algorithm (e.g., profit
      maximization, risk minimization).
    name: define_trading_objectives
    nodes_depended_on: []
    nodes_dependent_on: []
    prompt: State the primary business objectives for the trading algorithm. Produce
      a concise bullet list covering investment purpose, risk tolerance, and performance
      metrics (max 8 bullets). Focus only on objectives, do not include strategy details.
  deploy_trading_model:
    agent: false
    description: Deploy the trading model in a production-ready environment.
    name: deploy_trading_model
    nodes_depended_on:
    - hyperparameter_tuning
    nodes_dependent_on: []
    prompt: Deploy the trading model in a production-ready environment. Specify the
      deployment architecture and any necessary infrastructure (e.g., cloud services,
      APIs).
  evaluate_trading_model:
    agent: false
    description: Evaluate the performance of the trading model using the validation
      data.
    name: evaluate_trading_model
    nodes_depended_on:
    - train_trading_model
    nodes_dependent_on: []
    prompt: Evaluate the performance of the trading model using the validation data.
      Report metrics such as profit, loss, Sharpe ratio, and maximum drawdown.
  feature_engineering:
    agent: false
    description: Create relevant features from the historical data for use in the
      trading model.
    name: feature_engineering
    nodes_depended_on:
    - collect_historical_data
    nodes_dependent_on: []
    prompt: Extract relevant features from the historical data, such as moving averages,
      technical indicators, and statistical measures. List the features and their
      definitions.
  hyperparameter_tuning:
    agent: false
    description: Perform hyperparameter tuning to optimize the trading model's performance.
    name: hyperparameter_tuning
    nodes_depended_on:
    - evaluate_trading_model
    nodes_dependent_on: []
    prompt: Perform hyperparameter tuning using techniques such as grid search or
      random search. Report the optimal hyperparameters and the corresponding performance
      metrics.
  monitor_trading_model:
    agent: false
    description: Continuously monitor the performance of the trading model and adjust
      as needed.
    name: monitor_trading_model
    nodes_depended_on:
    - deploy_trading_model
    nodes_dependent_on: []
    prompt: Continuously monitor the performance of the trading model and adjust as
      needed. Report any changes to the model or its parameters.
  select_asset_universe:
    agent: false
    description: Enumerate the tradable assets and instruments for the algorithm.
    name: select_asset_universe
    nodes_depended_on:
    - define_trading_objectives
    nodes_dependent_on: []
    prompt: List the specific asset classes and instruments the algorithm will trade
      (e.g., US large-cap equities, S&P futures). Keep list â‰¤10 items.
  split_data:
    agent: false
    description: Split the historical data into training, validation, and testing
      sets.
    name: split_data
    nodes_depended_on:
    - feature_engineering
    nodes_dependent_on: []
    prompt: Split the historical data into training (e.g., 80%), validation (e.g.,
      10%), and testing sets (e.g., 10%). Ensure data is properly formatted for each
      set.
  train_trading_model:
    agent: false
    description: Train a trading model using the training data and selected features.
    name: train_trading_model
    nodes_depended_on:
    - split_data
    nodes_dependent_on: []
    prompt: Train a trading model using the training data and selected features. Specify
      the model type (e.g., linear regression, decision tree) and its parameters.
