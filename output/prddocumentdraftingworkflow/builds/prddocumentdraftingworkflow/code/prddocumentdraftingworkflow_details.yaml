dag_type: stub
description: Systematically generate, organize, and validate a Product Requirements
  Document (PRD) given user workflow requirements.
name: PRDDocumentDraftingWorkflow
nodes:
  compile_final_prd_document:
    agent: false
    code_node_type: stub
    description: Combine all previously drafted sections into a single coherent PRD
      document, maintaining logical order and structure.
    implementation: code/compile_final_prd_document.py
    name: compile_final_prd_document
    nodes_depended_on:
    - draft_prd_section_objectives
    - draft_prd_section_user_roles
    - draft_prd_section_features
    - draft_prd_section_constraints
    - draft_prd_section_success_metrics
    - draft_prd_section_stakeholders
    - draft_prd_section_user_journeys
    nodes_dependent_on: []
    output_structure:
    - description: Title of the Product Requirements Document
      key: prd_title
      type: str
    - description: The full formatted Objectives section text
      key: objectives_section
      type: str
    - description: The full formatted User Roles & Personas section text
      key: user_roles_and_personas_section
      type: str
    - description: The full formatted Features section text
      key: features_section
      type: str
    - description: The full formatted Constraints section text
      key: constraints_section
      type: str
    - description: The full formatted Success Metrics section text
      key: success_metrics_section
      type: str
    - description: The full formatted Stakeholders section text
      key: stakeholders_section
      type: str
    - description: The full formatted User Journeys section text
      key: user_journeys_section
      type: str
    - description: The complete combined PRD document as a single string, with all
        sections in proper order and headings
      key: full_prd_document
      type: str
    prd: code/prd/compile_final_prd_document_prd.yaml
    prompt: "Assemble the individually drafted PRD sections\u2014Objectives, User\
      \ Roles & Personas, Features, Constraints, Success Metrics, Stakeholders, and\
      \ User Journeys\u2014into a complete, well-structured Product Requirements Document.\
      \ Present each section with clear headings and preserve the coherence of the\
      \ original content."
    shims: []
  define_success_metrics:
    agent: false
    code_node_type: stub
    description: Articulate measurable criteria for determining product success based
      on extracted objectives.
    implementation: code/define_success_metrics.py
    name: define_success_metrics
    nodes_depended_on:
    - extract_objectives_from_workflow_requirements
    nodes_dependent_on: []
    output_structure:
    - description: List of names or brief descriptions for each defined success metric.
      key: metric_names
      type: List[str]
    - description: For each metric, a string describing which objective(s) it maps
        to.
      key: metric_objective_mappings
      type: List[str]
    - description: List indicating whether each success metric is quantifiable or
        objectively verifiable.
      key: metric_quantifiability
      type: List[bool]
    prd: code/prd/define_success_metrics_prd.yaml
    prompt: Given the set of objectives, define measurable success metrics for this
      product. Each metric should directly map to one or more objectives and be quantifiable
      or objectively verifiable.
    shims: []
  define_user_journeys_for_each_role:
    agent: false
    code_node_type: stub
    description: For each identified user role, provide a concise narrative of the
      main user journey(s) within the workflow.
    implementation: code/define_user_journeys_for_each_role.py
    name: define_user_journeys_for_each_role
    nodes_depended_on:
    - identify_primary_user_roles
    - extract_core_product_features
    nodes_dependent_on: []
    output_structure:
    - description: List of user role or persona names for whom journeys are defined.
      key: user_role_names
      type: List[str]
    - description: List of brief descriptions for each user role, aligned by index
        with user_role_names.
      key: user_role_descriptions
      type: List[str]
    - description: List of main user journey titles or names for each user role, matching
        the order of user_role_names.
      key: user_journey_titles
      type: List[str]
    - description: List of step-by-step narratives for each user journey, one item
        per user role, matching the order of user_role_names. Each step-by-step narrative
        is a single string with steps sequenced, separated by a delimiter or in formatted
        text.
      key: user_journey_steps
      type: List[str]
    prd: code/prd/define_user_journeys_for_each_role_prd.yaml
    prompt: For each previously identified user role, draft a brief step-by-step narrative
      (user journey) that illustrates how the user interacts with the product using
      the core features. Each journey should be specific to the role and workflow
      context.
    shims: []
  draft_prd_section_constraints:
    agent: false
    code_node_type: stub
    description: Format the extracted constraints into a 'Constraints' section for
      the PRD.
    implementation: code/draft_prd_section_constraints.py
    name: draft_prd_section_constraints
    nodes_depended_on:
    - extract_critical_constraints
    nodes_dependent_on: []
    output_structure:
    - description: Section heading for the Constraints section in the PRD.
      key: constraints_section_heading
      type: str
    - description: A list of formal, clearly stated constraints relevant to the product
        requirements.
      key: constraints_list
      type: List[str]
    prd: code/prd/draft_prd_section_constraints_prd.yaml
    prompt: Present the list of constraints in a formal 'Constraints' section of the
      PRD. Use clear, specific language and list each constraint separately.
    shims: []
  draft_prd_section_features:
    agent: false
    code_node_type: stub
    description: Compile the core features into the PRD 'Features' section.
    implementation: code/draft_prd_section_features.py
    name: draft_prd_section_features
    nodes_depended_on:
    - extract_core_product_features
    nodes_dependent_on: []
    output_structure:
    - description: The heading/title for the PRD Features section.
      key: features_section_title
      type: str
    - description: A list of core product features, each stated concisely suitable
        for inclusion in the PRD.
      key: feature_list
      type: List[str]
    prd: code/prd/draft_prd_section_features_prd.yaml
    prompt: Transform the core features into a detailed 'Features' section for a PRD.
      Present each feature concisely, using bullet points or a numbered list.
    shims: []
  draft_prd_section_objectives:
    agent: false
    code_node_type: stub
    description: Format the extracted objectives as the 'Objectives' section for the
      PRD.
    implementation: code/draft_prd_section_objectives.py
    name: draft_prd_section_objectives
    nodes_depended_on:
    - extract_objectives_from_workflow_requirements
    nodes_dependent_on: []
    output_structure:
    - description: The section heading for objectives, e.g. 'Objectives'.
      key: objectives_section_heading
      type: str
    - description: A list of individual, formal objective statements for inclusion
        in the PRD Objectives section.
      key: objective_statements
      type: List[str]
    prd: code/prd/draft_prd_section_objectives_prd.yaml
    prompt: Using the extracted objectives, rephrase these as a cohesive 'Objectives'
      section for a PRD. Use formal, declarative language appropriate for a technical
      document.
    shims: []
  draft_prd_section_stakeholders:
    agent: false
    code_node_type: stub
    description: Format the stakeholder summaries into a PRD 'Stakeholders' section.
    implementation: code/draft_prd_section_stakeholders.py
    name: draft_prd_section_stakeholders
    nodes_depended_on:
    - summarize_key_stakeholders
    nodes_dependent_on: []
    output_structure:
    - description: List of the stakeholder names or titles included in the PRD Stakeholders
        section.
      key: stakeholder_names
      type: List[str]
    - description: List of short descriptions for each stakeholder's role in the project.
        Aligned by index with stakeholder_names.
      key: stakeholder_roles
      type: List[str]
    - description: List of brief statements of each stakeholder's significance or
        interest in the project outcome. Aligned by index with stakeholder_names.
      key: stakeholder_significance
      type: List[str]
    - description: The fully formatted 'Stakeholders' section text, ready to be inserted
        directly into the PRD document.
      key: prd_stakeholders_section_text
      type: str
    prd: code/prd/draft_prd_section_stakeholders_prd.yaml
    prompt: Use the summarized stakeholders to create a 'Stakeholders' section for
      the PRD, briefly describing each stakeholder's role and significance.
    shims: []
  draft_prd_section_success_metrics:
    agent: false
    code_node_type: stub
    description: Draft the 'Success Metrics' section for the PRD using the defined
      metrics.
    implementation: code/draft_prd_section_success_metrics.py
    name: draft_prd_section_success_metrics
    nodes_depended_on:
    - define_success_metrics
    nodes_dependent_on: []
    output_structure:
    - description: The section heading for the success metrics in the PRD.
      key: success_metrics_section_title
      type: str
    - description: A list of strings, each describing a quantifiable or objectively
        verifiable success metric for the product.
      key: success_metrics_list
      type: List[str]
    prd: code/prd/draft_prd_section_success_metrics_prd.yaml
    prompt: Rewrite the measurable success metrics as a dedicated 'Success Metrics'
      section for the PRD. Structure each metric in a way that allows later verification
      of product success.
    shims: []
  draft_prd_section_user_journeys:
    agent: false
    code_node_type: stub
    description: Organize the user journeys as a distinct 'User Journeys' section
      in the PRD.
    implementation: code/draft_prd_section_user_journeys.py
    name: draft_prd_section_user_journeys
    nodes_depended_on:
    - define_user_journeys_for_each_role
    nodes_dependent_on: []
    output_structure:
    - description: Heading for the User Journeys section in the PRD.
      key: user_journey_section_heading
      type: str
    - description: List of user roles for which user journeys are documented.
      key: user_roles
      type: List[str]
    - description: List of titles/names for each user journey, corresponding one-to-one
        with user_roles.
      key: user_journey_titles
      type: List[str]
    - description: List of narrative descriptions for each user journey, corresponding
        one-to-one with user_roles.
      key: user_journey_narratives
      type: List[str]
    - description: For each user journey, a string formatted step-by-step sequence
        describing the actions in that journey (bulleted or numbered).
      key: user_journey_step_lists
      type: List[str]
    prd: code/prd/draft_prd_section_user_journeys_prd.yaml
    prompt: Format the user journeys as a 'User Journeys' section for the PRD, grouping
      each journey by user role and sequencing the steps in a clear, readable format.
    shims: []
  draft_prd_section_user_roles:
    agent: false
    code_node_type: stub
    description: Format the identified user roles as the 'User Roles & Personas' section
      for the PRD.
    implementation: code/draft_prd_section_user_roles.py
    name: draft_prd_section_user_roles
    nodes_depended_on:
    - identify_primary_user_roles
    nodes_dependent_on: []
    output_structure:
    - description: List of user role or persona names included in the PRD section
      key: role_names
      type: List[str]
    - description: List of brief descriptions for each user role or persona, matching
        the order of role_names
      key: role_descriptions
      type: List[str]
    - description: The full 'User Roles & Personas' section as formatted text for
        the PRD
      key: section_text
      type: str
    prd: code/prd/draft_prd_section_user_roles_prd.yaml
    prompt: Format the list of primary user roles into a structured 'User Roles &
      Personas' section suitable for a PRD. Use list or table format and include the
      brief description for each role.
    shims: []
  extract_core_product_features:
    agent: false
    code_node_type: stub
    description: Identify and list all core product features needed to satisfy the
      workflow requirements.
    implementation: code/extract_core_product_features.py
    name: extract_core_product_features
    nodes_depended_on:
    - extract_objectives_from_workflow_requirements
    nodes_dependent_on: []
    output_structure:
    - description: A list of singular, succinct descriptions of each core product
        feature required to achieve the stated objectives.
      key: core_product_features
      type: List[str]
    prd: code/prd/extract_core_product_features_prd.yaml
    prompt: Using the previously extracted objectives, identify and enumerate each
      core feature that the product must deliver. State each feature succinctly, without
      implementation details.
    shims: []
  extract_critical_constraints:
    agent: false
    code_node_type: stub
    description: List all technical, business, or regulatory constraints inferred
      or stated in the workflow requirements.
    implementation: code/extract_critical_constraints.py
    name: extract_critical_constraints
    nodes_depended_on: []
    nodes_dependent_on: []
    output_structure:
    - description: Individual statements of technical, business, regulatory, or design
        constraints relevant to the product requirements.
      key: constraints
      type: List[str]
    prd: code/prd/extract_critical_constraints_prd.yaml
    prompt: From the workflow requirements, identify all constraints that restrict
      how the product can be built or operate, including technical, business, regulatory,
      or design constraints. Present each constraint as an individual bullet point.
    shims: []
  extract_objectives_from_workflow_requirements:
    agent: false
    code_node_type: stub
    description: Extract explicit and implicit project objectives from the provided
      workflow requirements.
    implementation: code/extract_objectives_from_workflow_requirements.py
    name: extract_objectives_from_workflow_requirements
    nodes_depended_on: []
    nodes_dependent_on: []
    output_structure:
    - description: A list of explicit and implicit objectives that the PRD must address,
        each as a clearly stated goal.
      key: objectives
      type: List[str]
    prd: code/prd/extract_objectives_from_workflow_requirements_prd.yaml
    prompt: Given the workflow requirements input, identify and list all explicit
      and implicit objectives that the PRD must address. Focus only on stating clear
      objectives and do not include features, users, or constraints in this step.
    shims: []
  identify_primary_user_roles:
    agent: false
    code_node_type: stub
    description: Extract the main user roles or personas directly involved with the
      product based on the requirements.
    implementation: code/identify_primary_user_roles.py
    name: identify_primary_user_roles
    nodes_depended_on: []
    nodes_dependent_on: []
    output_structure:
    - description: List of primary user role or persona names directly involved with
        the product.
      key: user_role_names
      type: List[str]
    - description: List of concise one-sentence descriptions for each user role, matched
        by index to user_role_names.
      key: user_role_descriptions
      type: List[str]
    prd: code/prd/identify_primary_user_roles_prd.yaml
    prompt: Based only on the provided workflow requirements, list the primary user
      roles or personas that will interact with the product. Describe each user role
      in one sentence, focusing on their relationship to the workflow.
    shims: []
  summarize_key_stakeholders:
    agent: false
    code_node_type: stub
    description: Identify and summarize the interest and influence of key project
      stakeholders.
    implementation: code/summarize_key_stakeholders.py
    name: summarize_key_stakeholders
    nodes_depended_on: []
    nodes_dependent_on: []
    output_structure:
    - description: List of key stakeholder names.
      key: stakeholder_names
      type: List[str]
    - description: List of brief descriptions of each stakeholder's role.
      key: stakeholder_roles
      type: List[str]
    - description: List of brief descriptions of each stakeholder's interest in the
        project outcome.
      key: stakeholder_interests
      type: List[str]
    prd: code/prd/summarize_key_stakeholders_prd.yaml
    prompt: Based on the workflow requirements, list the key stakeholders for the
      product. For each stakeholder, briefly describe their role and interest in the
      project outcome.
    shims: []
